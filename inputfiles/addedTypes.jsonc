{
    "mixins": {
        "mixin": {
            "AbstractWorker": {
                "events": {
                    "event": [
                        {
                            "name": "error",
                            "type": "ErrorEvent"
                        }
                    ]
                }
            },
            "DocumentAndElementEventHandlers": {
                "events": {
                    "event": [
                        {
                            "name": "copy",
                            "type": "ClipboardEvent"
                        },
                        {
                            "name": "cut",
                            "type": "ClipboardEvent"
                        },
                        {
                            "name": "paste",
                            "type": "ClipboardEvent"
                        }
                    ]
                }
            },
            "DocumentOrShadowRoot": {
                // Manually moved from Document
                // See https://github.com/w3c/csswg-drafts/issues/5886 and https://github.com/w3c/csswg-drafts/issues/556
                "methods": {
                    "method": {
                        "elementFromPoint": {
                            "name": "elementFromPoint",
                            "overrideSignatures": [
                                "elementFromPoint(x: number, y: number): Element | null"
                            ]
                        },
                        "elementsFromPoint": {
                            "name": "elementsFromPoint",
                            "overrideSignatures": [
                                "elementsFromPoint(x: number, y: number): Element[]"
                            ]
                        }
                    }
                }
            },
            "GlobalEventHandlers": {
                "events": {
                    "event": [
                        {
                            "name": "abort",
                            "type": "UIEvent"
                        },
                        {
                            "name": "auxclick",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "beforeinput",
                            "type": "InputEvent"
                        },
                        {
                            "name": "blur",
                            "type": "FocusEvent"
                        },
                        {
                            "name": "click",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "compositionstart",
                            "type": "CompositionEvent"
                        },
                        {
                            "name": "compositionupdate",
                            "type": "CompositionEvent"
                        },
                        {
                            "name": "compositionend",
                            "type": "CompositionEvent"
                        },
                        {
                            "name": "drag",
                            "type": "DragEvent"
                        },
                        {
                            "name": "dragend",
                            "type": "DragEvent"
                        },
                        {
                            "name": "dragenter",
                            "type": "DragEvent"
                        },
                        {
                            "name": "dragleave",
                            "type": "DragEvent"
                        },
                        {
                            "name": "dragover",
                            "type": "DragEvent"
                        },
                        {
                            "name": "dragstart",
                            "type": "DragEvent"
                        },
                        {
                            "name": "drop",
                            "type": "DragEvent"
                        },
                        {
                            "name": "error",
                            "type": "ErrorEvent"
                        },
                        {
                            "name": "focus",
                            "type": "FocusEvent"
                        },
                        {
                            "name": "focusin",
                            "type": "FocusEvent"
                        },
                        {
                            "name": "focusout",
                            "type": "FocusEvent"
                        },
                        {
                            "name": "formdata",
                            "type": "FormDataEvent"
                        },
                        {
                            "name": "keydown",
                            "type": "KeyboardEvent"
                        },
                        {
                            "name": "keypress",
                            "type": "KeyboardEvent"
                        },
                        {
                            "name": "keyup",
                            "type": "KeyboardEvent"
                        },
                        {
                            "name": "mousedown",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "mouseenter",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "mouseleave",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "mousemove",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "mouseout",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "mouseover",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "mouseup",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "progress",
                            "type": "ProgressEvent"
                        },
                        {
                            "name": "resize",
                            "type": "UIEvent"
                        },
                        {
                            "name": "wheel",
                            "type": "WheelEvent"
                        },
                        {
                            "name": "securitypolicyviolation",
                            "type": "SecurityPolicyViolationEvent"
                        },
                        {
                            "name": "submit",
                            "type": "SubmitEvent"
                        },
                        {
                            "name": "dblclick",
                            "type": "MouseEvent"
                        },
                        {
                            "name": "contextmenu",
                            "type": "MouseEvent"
                        }
                    ]
                }
            },
            "WebGLRenderingContextBase": {
                "properties": {
                    "property": {
                        "canvas": {
                            "exposed": "Window"
                        }
                    }
                }
            },
            "WindowEventHandlers": {
                "events": {
                    "event": [
                        {
                            "name": "beforeunload",
                            "type": "BeforeUnloadEvent"
                        },
                        {
                            "name": "gamepadconnected",
                            "type": "GamepadEvent"
                        },
                        {
                            "name": "gamepaddisconnected",
                            "type": "GamepadEvent"
                        },
                        {
                            "name": "hashchange",
                            "type": "HashChangeEvent"
                        },
                        {
                            "name": "message",
                            "type": "MessageEvent"
                        },
                        {
                            "name": "messageerror",
                            "type": "MessageEvent"
                        },
                        {
                            "name": "pagehide",
                            "type": "PageTransitionEvent"
                        },
                        {
                            "name": "pageshow",
                            "type": "PageTransitionEvent"
                        },
                        {
                            "name": "popstate",
                            "type": "PopStateEvent"
                        },
                        {
                            "name": "storage",
                            "type": "StorageEvent"
                        },
                        {
                            "name": "unhandledrejection",
                            "type": "PromiseRejectionEvent"
                        },
                        {
                            "name": "rejectionhandled",
                            "type": "PromiseRejectionEvent"
                        }
                    ]
                }
            }
        }
    },
    "callbackInterfaces": {
        "interface": {}
    },
    "enums": {
        "enum": {
            "InsertPosition": {
              "name": "InsertPosition",
              "value": [
                "beforebegin",
                "beforeend",
                "afterbegin",
                "afterend"
              ]
            },
            "FontDisplay": {
              "name": "FontDisplay",
              // https://w3c.github.io/csswg-drafts/css-fonts-4/#font-display-desc
              "value": [
                "auto",
                "block",
                "swap",
                "fallback",
                "optional"
              ]
            },
            "ClientType": {
                "name": "ClientTypes"
            },
            "RTCStatsIceCandidatePairState": {
                "value": [
                    "inprogress"
                ]
            },
            "GlobalCompositeOperation": {
                "name": "GlobalCompositeOperation",
                "value": [
                    "source-over",
                    "source-in",
                    "source-out",
                    "source-atop",
                    "destination-over",
                    "destination-in",
                    "destination-out",
                    "destination-atop",
                    "lighter",
                    "copy",
                    "xor",
                    "multiply",
                    "screen",
                    "overlay",
                    "darken",
                    "lighten",
                    "color-dodge",
                    "color-burn",
                    "hard-light",
                    "soft-light",
                    "difference",
                    "exclusion",
                    "hue",
                    "saturation",
                    "color",
                    "luminosity"
                ]
            },
            "PermissionName": {
                "name": "PermissionName",
                // This is a subset of the permissions defined in the spec:
                // https://w3c.github.io/powerful-features-registry/#registry-table-of-powerful-features
                // Please add a feature only when it's supported by multiple engines.
                "value": [
                    // Full support: https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API#browser_compatibility
                    "camera",
                    // Full support: https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API#browser_compatibility
                    "geolocation",
                    // Full support: https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API#browser_compatibility
                    "microphone",
                    // Gecko and Blink: https://developer.mozilla.org/en-US/docs/Web/API/Web_MIDI_API#browser_compatibility
                    "midi",
                    // Full support: https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API#browser_compatibility
                    "notifications",
                    // Gecko and Blink: https://developer.mozilla.org/en-US/docs/Web/API/Storage_API#browser_compatibility
                    "persistent-storage",
                    // Full support: https://developer.mozilla.org/en-US/docs/Web/API/Push_API#browser_compatibility
                    "push",
                    // Full support: https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API#browser_compatibility
                    "screen-wake-lock",
                    // Full support: https://developer.mozilla.org/en-US/docs/Web/API/Storage_Access_API#browser_compatibility
                    "storage-access"
                ]
            },
            "AutoFillBase": {
                "name": "AutoFillBase",
                "value": [
                    // Off
                    "off",
                    // Automatic
                    "on",
                    ""
                ]
            },
            "AutoFillAddressKind": {
                "name": "AutoFillAddressKind",
                "value": [
                    "shipping",
                    "billing"
                ]
            },
            "AutoFillNormalField": {
                "name": "AutoFillNormalField",
                "value": [
                    "name",
                    "honorific-prefix",
                    "given-name",
                    "additional-name",
                    "family-name",
                    "honorific-suffix",

                    "username",
                    "new-password",
                    "current-password",
                    // Supported in iOS Safari too even though WPT tests
                    // for Safari currently fail as of 2023-06.
                    "one-time-code",

                    "organization",
                    "street-address",
                    "address-line1",
                    "address-line2",
                    "address-line3",
                    "address-level4",
                    "address-level3",
                    "address-level2",
                    "address-level1",
                    "country",
                    "country-name",
                    "postal-code",

                    "cc-name",
                    "cc-given-name",
                    "cc-family-name",
                    "cc-number",
                    "cc-exp",
                    "cc-exp-month",
                    "cc-exp-year",
                    "cc-csc",
                    "cc-type",
                    "transaction-currency",
                    "transaction-amount",

                    "bday-day",
                    "bday-month",
                    "bday-year"
                ]
            },
            "AutoFillContactKind": {
                "name": "AutoFillContactKind",
                "value": [
                    "home",
                    "work",
                    "mobile"
                ]
            },
            "AutoFillContactField": {
                "name": "AutoFillContactField",
                "value": [
                    "tel",
                    "tel-country-code",
                    "tel-national",
                    "tel-area-code",
                    "tel-local",
                    "tel-local-prefix",
                    "tel-local-suffix",
                    "tel-extension",
                    "email"
                ]
            },
            "AutoFillCredentialField": {
                "name": "AutoFillCredentialField",
                "value": [
                    "webauthn"
                ]
            }
        }
    },
    "interfaces": {
        "interface": {
            // ImportMeta is not a true DOM interface, but we are forced to declare it as one in order to emit method definitions.
            // We cannot define methods as dictionary properties with function types,
            // as this would cause conflicts with ImportMeta method overrides in places like @types/node.
            "ImportMeta": {
                "name": "ImportMeta",
                "exposed": "Window Worker",
                "noInterfaceObject": true,
                "properties": {
                    "property": {
                        "url": {
                            "name": "url",
                            "type": "DOMString"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "resolve": {
                            "name": "resolve",
                            "signature": [
                                {
                                    "param": [
                                        {
                                            "name": "specifier",
                                            "type": "DOMString"
                                        }
                                    ],
                                    "type": "DOMString"
                                }
                            ]
                        }
                    }
                }
            },
            "AudioWorkletProcessorImpl": {
                "name": "AudioWorkletProcessorImpl",
                "extends": "AudioWorkletProcessor",
                "methods": {
                    "method": {
                        "process": {
                            "name": "process",
                            "overrideSignatures": [
                                "process(inputs: Float32Array[][], outputs: Float32Array[][], parameters: Record<string, Float32Array>): boolean"
                            ]
                        }
                    }
                },
                "exposed": "AudioWorklet",
                "noInterfaceObject": true
            },
            "BroadcastChannel": {
                "events": {
                    "event": [
                        {
                            "name": "message",
                            "type": "MessageEvent"
                        },
                        {
                            "name": "messageerror",
                            "type": "MessageEvent"
                        }
                    ]
                }
            },
            "CompileError": {
                "name": "CompileError",
                "extends": "Error",
                "legacyNamespace": "WebAssembly",
                "constructor": {
                    "overrideSignatures": [
                        "new(message?: string): CompileError",
                        "(message?: string): CompileError"
                    ]
                }
            },
            "DeviceMotionEventAcceleration": {
                "noInterfaceObject": true
            },
            "DeviceMotionEventRotationRate": {
                "noInterfaceObject": true
            },
            "HTMLImageElement": {
                "name": "HTMLImageElement",
                "properties": {
                    "property": {
                        "decoding": {
                            "name": "decoding",
                            "overrideType": "\"async\" | \"sync\" | \"auto\""
                        },
                        "loading": {
                            "overrideType": "\"eager\" | \"lazy\""
                        }
                    }
                }
            },
            "HTMLTableDataCellElement": {
                "name": "HTMLTableDataCellElement",
                "extends": "HTMLTableCellElement",
                "noInterfaceObject": true,
                "deprecated": "prefer HTMLTableCellElement",
                "exposed": "Window"
            },
            "HTMLTableHeaderCellElement": {
                "name": "HTMLTableHeaderCellElement",
                "extends": "HTMLTableCellElement",
                "noInterfaceObject": true,
                "deprecated": "prefer HTMLTableCellElement",
                "exposed": "Window"
            },
            "HTMLDocument": {
                "name": "HTMLDocument",
                "extends": "Document",
                "deprecated": "use Document",
                "exposed": "Window"
            },
            "HTMLMediaElement": {
                "events": {
                    "event": [
                        {
                            "name": "encrypted",
                            "type": "MediaEncryptedEvent"
                        }
                    ]
                }
            },
            "CSSStyleDeclaration": {
                "name": "CSSStyleDeclaration",
                "properties": {
                    "property": {
                        "imageOrientation": {
                            "deprecated": true
                        },
                        "wordWrap": {
                            "deprecated": true
                        }
                    }
                }
            },
            "Window": {
                "name": "Window",
                "methods": {
                    "method": {
                        "captureEvents": {
                            "deprecated": true
                        }
                    }
                },
                "overrideIndexSignatures": [
                    "[index: number]: Window"
                ],
                "events": {
                    "event": [
                        {
                            "name": "devicemotion",
                            "type": "DeviceMotionEvent"
                        },
                        {
                            "name": "deviceorientation",
                            "type": "DeviceOrientationEvent"
                        },
                        {
                            "name": "deviceorientationabsolute",
                            "type": "DeviceOrientationEvent"
                        },
                        {
                            "name": "gamepadconnected",
                            "type": "GamepadEvent"
                        },
                        {
                            "name": "gamepaddisconnected",
                            "type": "GamepadEvent"
                        },
                        {
                            "name": "DOMContentLoaded",
                            "type": "Event"
                        }
                    ]
                }
            },
            "URLSearchParams": {
                "name": "URLSearchParams",
                "constructor": {
                    "signature": {
                        "0": {
                            "param": [
                                {
                                    "name": "init",
                                    "additionalTypes": ["URLSearchParams"]
                                }
                            ]
                        }
                    }
                }
            },
            "NodeListOf": {
                "name": "NodeListOf",
                "typeParameters": [
                    {
                        "name": "TNode",
                        "extends": "Node"
                    }
                ],
                "exposed": "Window",
                "extends": "NodeList",
                "methods": {
                    "method": {
                        "item": {
                            "name": "item",
                            "overrideSignatures": [
                                "item(index: number): TNode"
                            ]
                        }
                    }
                },
                "noInterfaceObject": true,
                "overrideIndexSignatures": [
                    "[index: number]: TNode"
                ],
                "iterator": {
                    "kind": "iterable",
                    "type": [
                        {
                            "overrideType": "TNode"
                        }
                    ]
                }
            },
            "HTMLCollectionOf": {
                "name": "HTMLCollectionOf",
                "typeParameters": [
                    {
                        "name": "T",
                        "extends": "Element"
                    }
                ],
                "exposed": "Window",
                "extends": "HTMLCollection",
                "methods": {
                    "method": {
                        "item": {
                            "getter": true,
                            "signature": [
                                {
                                    "nullable": true,
                                    "overrideType": "T",
                                    "param": [
                                        {
                                            "name": "index",
                                            "type": "unsigned long"
                                        }
                                    ]
                                }
                            ],
                            "specs": "html5",
                            "name": "item"
                        },
                        "namedItem": {
                            "name": "namedItem",
                            "overrideSignatures": [
                                "namedItem(name: string): T | null"
                            ]
                        }
                    }
                },
                "noInterfaceObject": true
            },
            "Element": {
                "name": "Element",
                "methods": {
                    "method": {
                        "getElementsByClassName": {
                            "name": "getElementsByClassName",
                            "signature": {
                                "0": {
                                    "overrideType": "HTMLCollectionOf<Element>"
                                }
                            }
                        },
                        "closest": {
                            "additionalSignatures": [
                                "closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null",
                                "closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null",
                                "closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null"
                            ],
                            "signature": {
                                "0": {
                                    "typeParameters": [
                                        {
                                            "name": "E",
                                            "extends": "Element",
                                            "default": "Element"
                                        }
                                    ],
                                    "overrideType": "E"
                                }
                            }
                        },
                        "insertAdjacentElement": {
                            "signature": {
                                "0": {
                                    "param": [
                                        {
                                            "name": "where",
                                            "type": "InsertPosition"
                                        }
                                    ]
                                }
                            }
                        },
                        "insertAdjacentHTML": {
                            "signature": {
                                "0": {
                                    "param": [
                                        {
                                            "name": "position",
                                            "type": "InsertPosition"
                                        }
                                    ]
                                }
                            }
                        },
                        "insertAdjacentText": {
                            "signature": {
                                "0": {
                                    "param": [
                                        {
                                            "name": "where",
                                            "type": "InsertPosition"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "properties": {
                    "property": {
                        "ownerDocument": {
                            "name": "ownerDocument",
                            "readonly": true,
                            "type": "Document"
                        }
                    }
                }
            },
            // This is used in many DT libraries, via ckeditor
            "ClientRect": {
                "name": "ClientRect",
                "exposed": "Window",
                "deprecated": true,
                "extends": "DOMRect",
                "noInterfaceObject": true
            },
            /*
              Keeping EventListener and EventListenerObject isn't the most elegant way to handle
              the event listeners, but we need to keep the EventListener as an extendable interface
              for libraries like angular.
            */
            "EventListener": {
                "name": "EventListener",
                "noInterfaceObject": true,
                "methods": {
                    "method": {
                        // This is a hack to add a call signature, but I think it's reasonable
                        // as it means we don't have to add a call signatures section to the
                        // emitter for this one case.
                        "callable": {
                            "overrideSignatures": [
                                "(evt: Event): void"
                            ]
                        }
                    }
                }
            },
            "EventListenerObject": {
                "name": "EventListenerObject",
                "noInterfaceObject": true,
                "methods": {
                    "method": {
                        "handleEvent": {
                            "overrideSignatures": [
                                "handleEvent(object: Event): void"
                            ]
                        }
                    }
                }
            },
            "Document": {
                "methods": {
                    "method": {
                        "createElementNS": {
                            "name": "createElementNS",
                            "additionalSignatures": [
                                "createElementNS(namespaceURI: \"http://www.w3.org/1999/xhtml\", qualifiedName: string): HTMLElement",
                                "createElementNS<K extends keyof SVGElementTagNameMap>(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: K): SVGElementTagNameMap[K]",
                                "createElementNS(namespaceURI: \"http://www.w3.org/2000/svg\", qualifiedName: string): SVGElement",
                                "createElementNS<K extends keyof MathMLElementTagNameMap>(namespaceURI: \"http://www.w3.org/1998/Math/MathML\", qualifiedName: K): MathMLElementTagNameMap[K]",
                                "createElementNS(namespaceURI: \"http://www.w3.org/1998/Math/MathML\", qualifiedName: string): MathMLElement",
                                "createElementNS(namespaceURI: string | null, qualifiedName: string, options?: ElementCreationOptions): Element"
                            ]
                        },
                        "caretRangeFromPoint": {
                            "name": "caretRangeFromPoint",
                            "deprecated": true,
                            "overrideSignatures": [
                                "caretRangeFromPoint(x: number, y: number): Range | null"
                            ]
                        }
                    }
                },
                "properties": {
                    "property": {
                        "ownerDocument": {
                            "name": "ownerDocument",
                            "readonly": true,
                            "overrideType": "null"
                        }
                    }
                },
                "events": {
                    "event": [
                        {
                            "name": "DOMContentLoaded",
                            "type": "Event"
                        }
                    ]
                }
            },
            // This is used in the React d.ts files, and not including
            // it would force an update for anyone using React.
            "StyleMedia": {
                "name": "StyleMedia",
                "exposed": "Window",
                "noInterfaceObject": true,
                "deprecated": true,
                "properties": {
                    "property": {
                        "type": {
                            "name": "type",
                            "type": "DOMString"
                        }
                    }
                },
                "methods": {
                    "method": {
                        "matchMedium": {
                            "name": "matchMedium",
                            "overrideSignatures": [
                                "matchMedium(mediaquery: string): boolean"
                            ]
                        }
                    }
                }
            },
            "Navigator": {
                "name": "Navigator",
                "properties": {
                    "property": {
                        "doNotTrack": {
                            "name": "doNotTrack",
                            "readonly": true,
                            "nullable": true,
                            "type": "DOMString"
                        }
                    }
                }
            },
            "HTMLIFrameElement": {
                "name": "HTMLIFrameElement",
                "properties": {
                    "property": {
                        "referrerPolicy": {
                            "type": "ReferrerPolicy"
                        }
                    }
                }
            },
            "IDBDatabase": {
                "name": "IDBDatabase",
                "events": {
                    "event": [
                        {
                            "name": "versionchange",
                            "type": "IDBVersionChangeEvent"
                        }
                    ]
                }
            },
            "IDBOpenDBRequest": {
                "name": "IDBOpenDBRequest",
                "extends": "IDBRequest<IDBDatabase>",
                "events": {
                    "event": [
                        {
                            "name": "upgradeneeded",
                            "type": "IDBVersionChangeEvent"
                        },
                        {
                            "name": "blocked",
                            "type": "IDBVersionChangeEvent"
                        }
                    ]
                }
            },
            "UIEvent": {
                "properties": {
                    "property": {
                        "which": {
                            "deprecated": true
                        }
                    }
                }
            },
            "SpeechSynthesisUtterance": {
                "events": {
                    "event": [
                        {
                            "name": "start",
                            "type": "SpeechSynthesisEvent"
                        },
                        {
                            "name": "end",
                            "type": "SpeechSynthesisEvent"
                        },
                        {
                            "name": "error",
                            "type": "SpeechSynthesisErrorEvent"
                        },
                        {
                            "name": "pause",
                            "type": "SpeechSynthesisEvent"
                        },
                        {
                            "name": "resume",
                            "type": "SpeechSynthesisEvent"
                        },
                        {
                            "name": "mark",
                            "type": "SpeechSynthesisEvent"
                        },
                        {
                            "name": "boundary",
                            "type": "SpeechSynthesisEvent"
                        }
                    ]
                }
            },
            "TextTrackList": {
                "events": {
                    "event": [
                        {
                            "name": "addtrack",
                            "type": "TrackEvent"
                        },
                        {
                            "name": "removetrack",
                            "type": "TrackEvent"
                        }
                    ]
                }
            },
            "DOMMatrixReadOnly": {
                "methods": {
                    "method": {
                        "scaleNonUniform": {
                            "deprecated": true
                        }
                    }
                }
            },
            "EventSource": {
                "events": {
                    "event": [
                        {
                            "name": "message",
                            "type": "MessageEvent"
                        }
                    ]
                }
            },
            "HTMLBodyElement": {
                "properties": {
                    "property": {
                        "onorientationchange": {
                            "deprecated": true
                        }
                    }
                }
            },
            "HTMLInputElement": {
                "properties": {
                    "property": {
                        "labels": {
                            "overrideType": "NodeListOf<HTMLLabelElement>"
                        }
                    }
                }
            },
            "HTMLLinkElement": {
                "properties": {
                    "property": {
                        "charset": {
                            "deprecated": true
                        },
                        "rev": {
                            "deprecated": true
                        },
                        "target": {
                            "deprecated": true
                        }
                    }
                }
            },
            "KHR_parallel_shader_compile": {
                "overrideExposed": "Window Worker"
            },
            "OVR_multiview2": {
                "overrideExposed": "Window Worker"
            },
            // The spec removed `timestamp` but browsers still have it.
            // https://github.com/w3c/webrtc-encoded-transform/pull/204
            "RTCEncodedAudioFrame": {
                "properties": {
                    "property": {
                        "timestamp": {
                            "mdnUrl": "https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/timestamp",
                            "name": "timestamp",
                            "type": "long long",
                            "readonly": true
                        }
                    }
                }
            },
            "RTCEncodedVideoFrame": {
                "properties": {
                    "property": {
                        "timestamp": {
                            "mdnUrl": "https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/timestamp",
                            "name": "timestamp",
                            "type": "long long",
                            "readonly": true
                        }
                    }
                }
            },
            "RTCDTMFSender": {
                "events": {
                    "event": [
                        {
                            "name": "tonechange",
                            "type": "RTCDTMFToneChangeEvent"
                        }
                    ]
                }
            },
            "RuntimeError": {
                "name": "RuntimeError",
                "extends": "Error",
                "legacyNamespace": "WebAssembly",
                "constructor": {
                    "overrideSignatures": [
                        "new(message?: string): RuntimeError",
                        "(message?: string): RuntimeError"
                    ]
                }
            },
            "SVGStyleElement": {
                "properties": {
                    "property": {
                        "disabled": {
                            "name": "disabled",
                            "type": "boolean"
                        }
                    }
                }
            },
            "LinkError": {
                "name": "LinkError",
                "extends": "Error",
                "legacyNamespace": "WebAssembly",
                "constructor": {
                    "overrideSignatures": [
                        "new(message?: string): LinkError",
                        "(message?: string): LinkError"
                    ]
                }
            },
            "MediaRecorder": {
                "events": {
                    "event": [
                        {
                            "name": "dataavailable",
                            "type": "BlobEvent"
                        }
                    ]
                }
            },
            "MediaStream": {
                "events": {
                    "event": [
                        {
                            "name": "addtrack",
                            "type": "MediaStreamTrackEvent"
                        },
                        {
                            "name": "removetrack",
                            "type": "MediaStreamTrackEvent"
                        }
                    ]
                }
            },
            "ProgressEvent": {
                "typeParameters": [
                    {
                        "name": "T",
                        "extends": "EventTarget",
                        "default": "EventTarget"
                    }
                ],
                "properties": {
                    "property": {
                        "target": {
                            "name": "target",
                            "readonly": true,
                            "nullable": true,
                            "overrideType": "T"
                        }
                    }
                }
            },
            "SharedWorkerGlobalScope": {
                "events": {
                    "event": [
                        {
                            "name": "connect",
                            "type": "MessageEvent"
                        }
                    ]
                }
            },
            "Attr": {
                "name": "Attr",
                "properties": {
                    "property": {
                        "ownerDocument": {
                            "name": "ownerDocument",
                            "readonly": true,
                            "type": "Document"
                        }
                    }
                }
            },
            "CharacterData": {
                "name": "CharacterData",
                "properties": {
                    "property": {
                        "ownerDocument": {
                            "name": "ownerDocument",
                            "readonly": true,
                            "type": "Document"
                        }
                    }
                }
            },
            "DocumentType": {
                "name": "DocumentType",
                "properties": {
                    "property": {
                        "ownerDocument": {
                            "name": "ownerDocument",
                            "readonly": true,
                            "type": "Document"
                        }
                    }
                }
            },
            "ProcessingInstruction": {
                "name": "ProcessingInstruction",
                "properties": {
                    "property": {
                        "ownerDocument": {
                            "name": "ownerDocument",
                            "readonly": true,
                            "type": "Document"
                        }
                    }
                }
            },
            "WebSocket": {
                "events": {
                    "event": [
                        {
                            "name": "close",
                            "type": "CloseEvent"
                        }
                    ]
                }
            },
            "WorkerGlobalScope": {
                "events": {
                    "event": [
                        {
                            "name": "rejectionhandled",
                            "type": "PromiseRejectionEvent"
                        },
                        {
                            "name": "unhandledrejection",
                            "type": "PromiseRejectionEvent"
                        }
                    ]
                }
            },
            "FileSystemFileHandle": {
                "properties": {
                    "property": {
                        "kind": {
                            "name": "kind",
                            "readonly": true,
                            "overrideType": "\"file\""
                        }
                    }
                }
            },
            "FileSystemDirectoryHandle": {
                "properties": {
                    "property": {
                        "kind": {
                            "name": "kind",
                            "readonly": true,
                            "overrideType": "\"directory\""
                        }
                    }
                }
            }
        }
    },
    "dictionaries": {
        "dictionary": {
            "KeyboardEventInit": {
                "members": {
                    "member": {
                        "charCode": {
                            "deprecated": true
                        },
                        "keyCode": {
                            "deprecated": true
                        }
                    }
                }
            },
            "MemoryDescriptor": {
                "members": {
                    "member": {
                        "shared": {
                            "name": "shared",
                            "type": "boolean"
                        }
                    }
                }
            },
            "ReadableStreamReadDoneResult": {
                "name": "ReadableStreamReadDoneResult",
                "typeParameters": [
                    {
                        "name": "T"
                    }
                ],
                "members": {
                    "member": {
                        "done": {
                            "name": "done",
                            "overrideType": "true",
                            "required": true
                        },
                        "value": {
                            "name": "value",
                            "overrideType": "T"
                        }
                    }
                }
            },
            "ReadableStreamReadValueResult": {
                "name": "ReadableStreamReadValueResult",
                "typeParameters": [
                    {
                        "name": "T"
                    }
                ],
                "members": {
                    "member": {
                        "done": {
                            "name": "done",
                            "overrideType": "false",
                            "required": true
                        },
                        "value": {
                            "name": "value",
                            "overrideType": "T",
                            "required": true
                        }
                    }
                }
            },
            "UnderlyingByteSource": {
                "name": "UnderlyingByteSource",
                "members": {
                    "member": {
                        "type": {
                            "name": "type",
                            "required": true,
                            "overrideType": "\"bytes\""
                        },
                        "autoAllocateChunkSize": {
                            "name": "autoAllocateChunkSize",
                            "type": "unsigned long long"
                        },
                        "start": {
                            "name": "start",
                            "overrideType": "(controller: ReadableByteStreamController) => any"
                        },
                        "pull": {
                            "name": "pull",
                            "overrideType": "(controller: ReadableByteStreamController) => void | PromiseLike<void>"
                        },
                        "cancel": {
                            "name": "cancel",
                            "type": "UnderlyingSourceCancelCallback"
                        }
                    }
                }
            },
            "UnderlyingDefaultSource": {
                "name": "UnderlyingDefaultSource",
                "typeParameters": [
                    {
                        "name": "R",
                        "default": "any"
                    }
                ],
                "members": {
                    "member": {
                        "type": {
                            "name": "type",
                            "type": "undefined"
                        },
                        "start": {
                            "name": "start",
                            "overrideType": "(controller: ReadableStreamDefaultController<R>) => any"
                        },
                        "pull": {
                            "name": "pull",
                            "overrideType": "(controller: ReadableStreamDefaultController<R>) => void | PromiseLike<void>"
                        },
                        "cancel": {
                            "name": "cancel",
                            "type": "UnderlyingSourceCancelCallback"
                        }
                    }
                }
            },
            "ValueTypeMap": {
                "name": "ValueTypeMap",
                "legacyNamespace": "WebAssembly",
                "exposed":"Window Worker Worklet",
                "members": {
                    "member": {
                        "anyfunc": {
                            "name": "anyfunc",
                            "overrideType": "Function",
                            "required": 1
                        },
                        "externref": {
                            "name": "externref",
                            "overrideType": "any",
                            "required": 1
                        },
                        "f32": {
                            "name": "f32",
                            "overrideType": "number",
                            "required": 1
                        },
                        "f64": {
                            "name": "f64",
                            "overrideType": "number",
                            "required": 1
                        },
                        "i32": {
                            "name": "i32",
                            "overrideType": "number",
                            "required": 1
                        },
                        "i64": {
                            "name": "i64",
                            "overrideType": "bigint",
                            "required": 1
                        },
                        "v128": {
                            "name": "v128",
                            "overrideType": "never",
                            "required": 1
                        }
                    }
                }
            }
        }
    },
    "typedefs": {
        "typedef": [
            {
                "type": {
                    "0": {
                        "subtype": {
                            "overrideType": "[string, string]"
                        }
                    }
                },
                "additionalTypes": ["Headers"],
                "name": "HeadersInit"
            },
            {
                "overrideType": "number | string | Date | BufferSource | IDBValidKey[]",
                "name": "IDBValidKey"
            },
            {
                "type": {
                    "0": {
                        "type": "Algorithm"
                    }
                },
                "name": "AlgorithmIdentifier"
            },
            {
                "name": "MutationRecordType",
                "overrideType": "\"attributes\" | \"characterData\" | \"childList\""
            },
            {
                "name": "WindowProxy",
                "type": "Window"
            },
            {
                "name": "ValueType",
                "legacyNamespace": "WebAssembly",
                "overrideType": "keyof ValueTypeMap"
            },
            {
                "name": "ExportValue",
                "legacyNamespace": "WebAssembly",
                "overrideType": "Function | Global | Memory | Table"
            },
            {
                "name": "Exports",
                "legacyNamespace": "WebAssembly",
                "type": "record",
                "subtype": [
                    {
                        "type": "DOMString"
                    },
                    {
                        "type": "ExportValue"
                    }
                ]
            },
            {
                "name": "ImportValue",
                "legacyNamespace": "WebAssembly",
                "overrideType": "ExportValue | number"
            },
            {
                "name": "ModuleImports",
                "legacyNamespace": "WebAssembly",
                "type": "record",
                "subtype": [
                    {
                        "type": "DOMString"
                    },
                    {
                        "type": "ImportValue"
                    }
                ]
            },
            {
                "name": "Imports",
                "legacyNamespace": "WebAssembly",
                "type": "record",
                "subtype": [
                    {
                        "type": "DOMString"
                    },
                    {
                        "type": "ModuleImports"
                    }
                ]
            },
            {
                "name": "ReadableStreamReadResult",
                "typeParameters": [
                    {
                        "name": "T"
                    }
                ],
                "type": [
                    {
                        "type": "ReadableStreamReadValueResult"
                    },
                    {
                        "type": "ReadableStreamReadDoneResult"
                    }
                ],
                "overrideType": "ReadableStreamReadValueResult<T> | ReadableStreamReadDoneResult<T>"
            },
            {
                "name": "EventListenerOrEventListenerObject",
                "overrideType": "EventListener | EventListenerObject"
            },
            {
                "name": "OptionalPrefixToken",
                "typeParameters": [
                    {
                        "name": "T extends string"
                    }
                ],
                "overrideType": "`${T} ` | \"\""
            },
            {
                "name": "OptionalPostfixToken",
                "typeParameters": [
                    {
                        "name": "T extends string"
                    }
                ],
                "overrideType": "` ${T}` | \"\""
            },
            {
                "name": "AutoFillSection",
                // Note: this will also eagerly match any invalid string
                // after section- instead of stopping at the first whitespace.
                // It should be something like /section-\S/ if it were supported.
                "overrideType": "`section-${string}`"
            },
            {
                "name": "AutoFillField",
                "overrideType": "AutoFillNormalField | `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`"
            },
            {
                // See the full list of possible autofill values for the `autocomplete` attribute:
                // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#determine-a-field's-category
                // Full spec at https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill.
                "name": "AutoFill",
                "overrideType": "AutoFillBase | `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<AutoFillAddressKind>}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`"
            }
        ]
    }
}
